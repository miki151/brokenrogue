
export import "ui_canvas.znn";
import "rectangle.znn";
import "ui_event.znn";
import "game.znn";
export import "std/any.znn";
import "std/io.znn";
export import "ui.znn";
import "rectangle.znn";
import "ui_state.znn";
import "std/time.znn";

export [@ui_element]
struct GameLevelUI {
  int tile_size;
  int fontSize;
  int jumpDuration;
  int woundedAnimDuration;
  int explosionDuration;
  double jumpHeight;
  double view_angle;
  double cameraSensitivity;
  double joystickMovementDeadRange;
  double minJoystickMovement;
  key_event forward_key;
  key_event backward_key;
  key_event left_key;
  key_event right_key;
  key_event wait_key;
  key_event melee_key;
  key_event shoot_key;
};

export struct GameLevelUIData {
  Game mutable* game;
  invoke<void, int>* timeSpentCallback;
};

export bool onKeyEvent(GameLevelUI* ui, UIContext context, rectangle*, key_event* event) {
  const state = context.state->get_state<GameLevelUIState>();
  const data = *context.data->cast_to<GameLevelUIData>();
  const player = data->game->getPlayer();
  if (*event == ui->forward_key)
    discard player->advance(data->game, 4 * context.timeDiff, state->playerDir);
  else if (*event == ui->backward_key)
    discard player->advance(data->game, -4 * context.timeDiff, state->playerDir);
  else if (*event == ui->left_key)
    discard player->advance(data->game, 4 * context.timeDiff, state->playerDir + 1.57);
  else if (*event == ui->right_key)
    discard player->advance(data->game, 4 * context.timeDiff, state->playerDir - 1.57);
  else if (*event == ui->shoot_key)
    shoot(context);
  else if (*event == ui->melee_key) {
    if (player->addMeleeAttack(state->playerDir)) {
     // data->timeSpentCallback->invoke((1100 * player->ongoingAttack->attack.duration).as_int());
    }
  } else if (*event != ui->wait_key)
    return false;
  data->timeSpentCallback->invoke((context.timeDiff * 1010).as_int());
  return true;
}

vec2 projectOnScreen(GameLevelUI* ui, GameObject* player, vec2d pos, double playerDir) {
  const diff = pos - player->pos;
  const dist = ui->tile_size.as_double() * diff.length_d();
  const angle = playerDir - atan2(diff.x, diff.y);
  return vec2((sin(angle) * dist).as_int(), (-cos(angle) * dist * ui->view_angle).as_int());
}

export struct GameLevelUIState {
  double playerDir;
};

export GameLevelUIState() {
  return GameLevelUIState::GameLevelUIState(0.0);
}

void shoot(UIContext context) {
  const state = context.state->get_state<GameLevelUIState>();
  const data = *context.data->cast_to<GameLevelUIData>();
  discard data->game->addRangedAttack(data->game->getPlayer(), state->playerDir);
  data->timeSpentCallback->invoke(30);
}

export bool onMouseEvent(GameLevelUI* ui, UIContext context, rectangle*, mouse_event* event) {
  const state = context.state->get_state<GameLevelUIState>();
  const data = *context.data->cast_to<GameLevelUIData>();
  const player = data->game->getPlayer();
  switch (event->type) {
    case (JOYSTICK_RIGHT) {
      state->playerDir -= context.timeDiff * ui->cameraSensitivity * event->pos.x;
    }
    case (JOYSTICK_LEFT) {
      mutable pos = event->pos;
      if (abs(pos.x).as_double() < abs(pos.y) * ui->joystickMovementDeadRange)
        pos.x = 0;
      if (abs(pos.y).as_double() < abs(pos.x) * ui->joystickMovementDeadRange)
        pos.y = 0;
      const angle = state->playerDir + atan2(pos.x, pos.y);
      const length = pos.length_d();
      if (length > 1000 * ui->minJoystickMovement) {
        discard player->advance(data->game, -4 * context.timeDiff * length / 1000,
            angle);
        data->timeSpentCallback->invoke((1100 * context.timeDiff).as_int());
      }
    }
    case (RIGHT) {
      shoot(context);
    }
    case (LEFT) {
      if (player->addMeleeAttack(state->playerDir)) {
       // data->timeSpentCallback->invoke((1100 * player->ongoingAttack->attack.duration).as_int());
      }
    }
    default {
      return false;
    }
  }
  return true;
}

double getJumpOffset(mutable double state) {
  if (state > 0.5)
    state -= 0.5;
  state *= 2;
  return 1.0 - (2.0 * state - 1) * (2.0 * state - 1);
}

struct GlyphRenderElem {
  Glyph glyph;
  vec2 pos;
};

void drawBloodParticle(GameLevelUI* ui, UIContext context, vec2 origin, int start, int curTime) {
  const h = ui->fontSize * 2 / 3;
  const w = (((abs(start) % 100 * 67) % 100) / 50.0 - 1) * ui->fontSize / 3;
  const t = curTime - start;
  const dur = ui->woundedAnimDuration;
  const offset = vec2((w * t / dur).as_int(), (h * t * t / (dur * dur) - h / 2).as_int());
  const pos = origin + offset;
  Glyph("*", color(255, 0, 0), 0.5).render(context.canvas, ui->fontSize, pos);
}

export void render(GameLevelUI* ui, UIContext context, rectangle* r) {
  const data = *context.data->cast_to<GameLevelUIData>();
  const player = &data->game->objects[0];
  const origin = vec2(r->middle().x, (r->top() + 2 * r->bottom()) / 3);
  const to_draw = r->plus_margin(ui->tile_size);
  const state = context.state->get_state<GameLevelUIState>();
  for (pos : centered_rect(player->pos.as_int(), data->game->lineOfSight))
    if (const t = data->game->level.getTile(*pos)) {
      const coord = origin + ui->projectOnScreen(player, pos->as_double(), state->playerDir);
      if (to_draw.contains(&coord) && data->game->canSee(player, *pos))
        (*t)->glyph.render(context.canvas, ui->fontSize, coord);
    }
  mutable toRender = vector<GlyphRenderElem>();
  const curTime = current_time_milli();
  for (obj : data->game->objects)
    if ((!obj->ongoingAttack || !!obj->ongoingAttack->attack.glyph) &&
        data->game->canSee(player, obj->pos.as_int())) {
      const coord = origin + ui->projectOnScreen(player, obj->pos, state->playerDir);
      if (to_draw.contains(&coord)) {
        const jumpState = ((curTime % ui->jumpDuration + ui->jumpDuration) % ui->jumpDuration).as_double() 
            / ui->jumpDuration;
        const offset = !obj->animation.lastMovement
            || *obj->animation.lastMovement < curTime - (1000 * context.timeDiff).as_int() - 10
            ? 0
            : (ui->fontSize * ui->jumpHeight * getJumpOffset(jumpState)).as_int();
        toRender.push_back(GlyphRenderElem(obj->attributes.glyph.copy(), coord - vec2(0, offset)));
      }
    }
  toRender.sort(&[](GlyphRenderElem* p1, GlyphRenderElem* p2) {
      return p1->pos.y < p2->pos.y;
  });
  for (elem : toRender)
    elem->glyph.render(context.canvas, ui->fontSize, elem->pos);
  for (obj : data->game->objects)
    if (!!obj->ongoingAttack && data->game->canSee(player, obj->pos.as_int())) {
      const coord = origin + ui->projectOnScreen(player, obj->pos + obj->ongoingAttack->getPosition(),
          state->playerDir);
      if (to_draw.contains(&coord))
        (obj->ongoingAttack->attack.glyph ?? obj->attributes.glyph).render(context.canvas, ui->fontSize, coord,
            !!obj->ongoingAttack->attack.glyph ? state->playerDir - obj->ongoingAttack->dir : 0);
    }
  for (anim : data->game->animations) {
    const coord = origin + ui->projectOnScreen(player, anim->position, state->playerDir);
    if (to_draw.contains(&coord))
      switch (anim->type) {
        case (EXPLOSION) {
          if (anim->time + ui->explosionDuration > curTime)
            Glyph("*", color(255, 100, 0), 1.0).render(context.canvas, ui->fontSize, coord);
        }
        case (BLOOD) {
          if (anim->time + ui->woundedAnimDuration > curTime)
            drawBloodParticle(ui, context, coord, anim->time, curTime);
        }
      }
  }
}


