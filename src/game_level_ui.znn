
export import "ui/canvas.znn";
import "ui/rectangle.znn";
import "ui/event.znn";
import "game.znn";
export import "std/any.znn";
import "std/io.znn";
export import "ui/ui.znn";
import "ui/rectangle.znn";
import "ui/state.znn";
import "std/time.znn";
import "std/enum.znn";
export import "glyph.znn";
import "game_object.znn";

export enum MovementScheme {
  KEYBOARD,
  MOUSE2
};

export [@ui_element]
struct GameLevelUI {
  bool seeWholeMap;
  bool showOutlines;
  int tileSize;
  double fontRatio;
  int jumpDuration;
  int woundedAnimDuration;
  int explosionDuration;
  double jumpHeight;
  MovementScheme movementScheme;
  double viewAngle;
  double cameraSensitivity;
  double joystickMovementDeadRange;
  double minJoystickMovement;
  key_event forwardKey;
  key_event backwardKey;
  key_event leftKey;
  key_event rightKey;
  key_event waitKey;
  key_event meleeKey;
  key_event shootKey;
  key_event changeLevelKey;
  box<UIElement> stairsMessage;
  box<UIElement> gameOverMessage;
  box<UIElement> gameWonMessage;
};

int getFontSize(GameLevelUI* ui) {
  return (ui^.fontRatio * ui^.tileSize).as_int();
}

vec2 getScreenOrigin(MovementScheme scheme, rectangle* r) {
  switch (scheme) {
    case (KEYBOARD) {
      return vec2(r^.middle().x, (r^.top() + 2 * r^.bottom()) / 3);
    }
    case (MOUSE2) {
      return r^.middle();
    }
  }
}

export struct HighlightedObjectInfo {
  Glyph glyph;
  string name;
  double hp;
};

export HighlightedObjectInfo copy(HighlightedObjectInfo*) = default;

export struct GameLevelUIData {
  Game mutable* game;
  invoke<void, int>* timeSpentCallback;
  invoke<void, HighlightedObjectInfo?>* highlightedObjectCallback;
  invoke<void>* restartCallback;
};

export bool onKeyEvent(GameLevelUI* ui, UIContext context, rectangle*, key_event* event) {
  const state = context.state^.get_state<GameLevelUIState>();
  const data = *context.data^.cast_to<GameLevelUIData>();
  const player = data^.game^.getPlayer();
  if (!!data^.game^.status && event^.key == key_type::ENTER) {
    data^.restartCallback^.invoke();
    return true;
  }
  const timeDiff = context.timeDiff * 0.7;
  if (ui^.forwardKey.covers(event))
    discard player^.walk(data^.game, timeDiff, state^.playerDir, null);
  else if (ui^.backwardKey.covers(event))
    discard player^.walk(data^.game, -timeDiff, state^.playerDir, null);
  else if (ui^.leftKey.covers(event))
    discard player^.walk(data^.game, timeDiff, state^.playerDir + 1.57, null);
  else if (ui^.rightKey.covers(event))
    discard player^.walk(data^.game, timeDiff, state^.playerDir - 1.57, null);
  else if (ui^.shootKey.covers(event))
    shoot(context);
  else if (ui^.meleeKey.covers(event)) {
    discard player^.addMeleeAttack(state^.playerDir, 0);
  }
  else if (ui^.changeLevelKey.covers(event) && data^.game^.canUseStairs()) {
    data^.game^.useStairs();
    return true;
  } else if (!ui^.waitKey.covers(event))
    return false;
  data^.game^.advance(timeDiff);
  return true;
}

vec2 projectOnScreen(GameLevelUI* ui, GameObject* player, vec2d pos, double playerDir) {
  const diff = pos - player^.pos;
  const dist = ui^.tileSize.as_double() * diff.length_d();
  const angle = playerDir - atan2(diff.x, diff.y);
  return vec2((sin(angle) * dist).as_int(), (-cos(angle) * dist * ui^.viewAngle).as_int());
}

export struct GameLevelUIState {
  double playerDir = 0.0;
  double? targetAngle = null;
};

void shoot(UIContext context) {
  const state = context.state^.get_state<GameLevelUIState>();
  const data = *context.data^.cast_to<GameLevelUIData>();
  discard data^.game^.addRangedAttack(data^.game^.getPlayer(), state^.playerDir);
  data^.timeSpentCallback^.invoke(30);
}

bool onMouseEventMouse2(GameLevelUI* ui, UIContext context, rectangle*, mouse_event* event) {
  const state = context.state^.get_state<GameLevelUIState>();
  const data = *context.data^.cast_to<GameLevelUIData>();
  const player = data^.game^.getPlayer();
  const mousePos = event^.pos;
  switch (event^.type) {
    case (JOYSTICK_RIGHT) {
      if (mousePos.length_d() > 200)
        state^.targetAngle = mousePos.get_angle();
      else
        state^.targetAngle = null;
    }
    case (JOYSTICK_LEFT) {
      mutable pos = mousePos;
      if (abs(pos.x).as_double() < abs(pos.y) * ui^.joystickMovementDeadRange)
        pos.x = 0;
      if (abs(pos.y).as_double() < abs(pos.x) * ui^.joystickMovementDeadRange)
        pos.y = 0;
      const angle = state^.playerDir + pos.get_angle();
      const length = pos.length_d();
      if (length > 1000 * ui^.minJoystickMovement) {
        discard player^.walk(data^.game, -context.timeDiff * length / 1000, angle, null);
        data^.game^.advance(abs(context.timeDiff * length / 1000));
      }
    }
    case (LEFT) {
      if (!!state^.targetAngle) {
        discard player^.addMeleeAttack(*state^.targetAngle, 0);
        data^.timeSpentCallback^.invoke(as_int(1000 * player^.attributes.creature^.meleeAttack[0].duration));
      }
    }
    case (RIGHT_RELEASED) {
      if (data^.game^.canUseStairs())
        data^.game^.useStairs();
    }
    default {
      return false;
    }
  }
  return true;
}

export bool onMouseEvent(GameLevelUI* ui, UIContext context, rectangle* r, mouse_event* event) {
  if (ui^.movementScheme == MovementScheme::MOUSE2)
    return onMouseEventMouse2(ui, move(context), r, event);
  const state = context.state^.get_state<GameLevelUIState>();
  const data = *context.data^.cast_to<GameLevelUIData>();
  const player = data^.game^.getPlayer();
  switch (event^.type) {
    case (MOUSE_MOVEMENT) {
      mutable diff = ui^.cameraSensitivity * event^.pos.x;
      state^.playerDir -= diff;
    }
    case (JOYSTICK_LEFT) {
      mutable pos = event^.pos;
      if (abs(pos.x).as_double() < abs(pos.y) * ui^.joystickMovementDeadRange)
        pos.x = 0;
      if (abs(pos.y).as_double() < abs(pos.x) * ui^.joystickMovementDeadRange)
        pos.y = 0;
      const angle = state^.playerDir + atan2(pos.x, pos.y);
      const length = pos.length_d();
      if (length > 1000 * ui^.minJoystickMovement) {
        discard player^.walk(data^.game, -context.timeDiff * length / 1000, angle, null);
        data^.game^.advance(abs(context.timeDiff * length / 1000));
      }
    }
    case (RIGHT) {
      if (data^.game^.canUseStairs())
        data^.game^.useStairs();
//      shoot(context);
    }
    case (LEFT) {
      discard player^.addMeleeAttack(state^.playerDir, 0);
      data^.timeSpentCallback^.invoke(as_int(1000 * player^.attributes.creature^.meleeAttack[0].duration));
    }
    default {
      return false;
    }
  }
  return true;
}

double getJumpOffset(mutable double state) {
  if (state > 0.5)
    state -= 0.5;
  state *= 2;
  return 1.0 - (2.0 * state - 1) * (2.0 * state - 1);
}

struct GlyphRenderElem {
  Glyph glyph;
  vec2 pos;
  int radius;
  double? projectileDir;
};

void drawBloodParticle(GameLevelUI* ui, UIContext context, vec2 origin, milliseconds_t start,
    milliseconds_t curTime, color col) {
  const h = ui^.getFontSize() * 2 / 3;
  const w = (((abs(start) % 100 * 67) % 100) / 50.0 - 1) * ui^.getFontSize() / 3;
  const t = curTime - start;
  const dur = ui^.woundedAnimDuration;
  const offset = vec2((w * t / dur).as_int(), (h * t * t / (dur * dur) - h / 2).as_int());
  const pos = origin + offset;
  Glyph("*", col, 0.5, GlyphLayer::EFFECT)
      .render(context.canvas, ui^.getFontSize(), pos, 0, false, 0);
}

void drawHeartParticle(GameLevelUI* ui, UIContext context, vec2 origin, milliseconds_t start,
    milliseconds_t curTime) {
  const h = ui^.getFontSize() * 2 / 3;
  const w = (((abs(start) % 100 * 67) % 100) / 50.0 - 1) * ui^.getFontSize() / 3;
  const t = curTime - start;
  const dur = ui^.woundedAnimDuration;
  const offset = vec2((w * t / dur).as_int(), -ui^.getFontSize() / 2 -(h * t * t / (dur * dur) - h / 2).as_int());
  const pos = origin + offset;
  Glyph("heart", color(255, 0, 0), 0.5, GlyphLayer::EFFECT)
      .render(context.canvas, ui^.getFontSize(), pos, 0, false, 0);
}

bool canReachMelee(GameObject* obj, GameObject* target, double dir) {
  // Test some intermediate points in case we can reach beyond the target.
  for (i = 0.0; i <= 1.0; i += 0.1) {
    const pos = obj^.calculateMeleeAttackPosition(dir, i);
    if (target^.isPenetrated(pos))
      return true;
  }
  return false;
}

export double getAngleDifferenceAbs(double a1, double a2) {
  mutable angle = abs(a1 - a2);
  while (angle > 2 * 3.1415)
    angle -= 2 * 3.1415;
  if (angle > 3.1415)
    angle = 2 * 3.1415 - angle;
  return angle;
}

export void render(GameLevelUI* ui, UIContext context, rectangle* r) {
  const data = *context.data^.cast_to<GameLevelUIData>();
  const player = data^.game^.getPlayer();
  const origin = getScreenOrigin(ui^.movementScheme, r);
  const to_draw = r^.plus_margin(ui^.tileSize);
  const state = context.state^.get_state<GameLevelUIState>();
  mutable toRender = vector<GlyphRenderElem>();
  const curTime = current_time_milli();
  mutable highlightedObject = player;
  mutable bestAngle = 100000.0;
  for (it : *data^.game^.getObjects()) {
    const obj = it^.get();
    const canSee = ui^.seeWholeMap || data^.game^.canSee(player, obj^.pos.as_int());
    if ((canSee || obj^.remember) && !!obj^.attributes.glyph) {
      if (!!state^.targetAngle || ui^.movementScheme == MovementScheme::KEYBOARD) {
        if (obj != player && !!obj^.attributes.creature) {
          const angle = getAngleDifferenceAbs(atan2(obj^.pos.x - player^.pos.x, obj^.pos.y - player^.pos.y),
              state^.targetAngle ?? state^.playerDir);
          if (angle < bestAngle) {
            bestAngle = angle;
            highlightedObject = obj;
          }
        }
      }
      const projected = ui^.projectOnScreen(player, obj^.pos, state^.playerDir);
      const coord = origin + projected;
      if (to_draw.contains(&coord)) {
        const jumpState = ((curTime % ui^.jumpDuration + ui^.jumpDuration) % ui^.jumpDuration).as_double()
            / ui^.jumpDuration;
        const offset = !obj^.animation.lastMovement
            || *obj^.animation.lastMovement < curTime - (1000 * context.timeDiff).as_int() - 10
            ? 0
            : (ui^.getFontSize() * ui^.jumpHeight * getJumpOffset(jumpState)).as_int();
        mutable double? projectileDir = null;
        if (obj^.projectile)
          projectileDir = 1.57 -obj^.projectile^.dir.get_angle();
        mutable glyph = obj^.attributes.glyph^.copy();
        if (obj != player && !!obj^.attributes.creature && (
            !!state^.targetAngle && player^.canReachMelee(obj, *state^.targetAngle) ||
            ui^.movementScheme == MovementScheme::KEYBOARD && player^.canReachMelee(obj, state^.playerDir)))
          glyph.col = color(255, 255, 255);
        toRender.push_back(GlyphRenderElem(move(glyph), coord - vec2(0, offset),
            (!!obj^.attributes.box && !!obj^.attributes.creature ?
                obj^.attributes.box^.size / 2 * ui^.tileSize.as_double() : 0.0).as_int(),
            projectileDir));
        if (!canSee && obj^.remember)
          toRender.back()^.glyph.switchToMemory();
        else if (obj^.attributes.canRemember)
          obj^.remember = true;
      }
    }
  }
  if (highlightedObject != player)
    data^.highlightedObjectCallback^.invoke(HighlightedObjectInfo(
        highlightedObject^.attributes.glyph^.copy(),
        highlightedObject^.attributes.name,
        *highlightedObject^.health / *highlightedObject^.attributes.maxHealth));
  else {
    const HighlightedObjectInfo? tmp = null;
    data^.highlightedObjectCallback^.invoke(move(tmp));
  }
  toRender.sort(&[](GlyphRenderElem* p1, GlyphRenderElem* p2) {
      const layer1 = p1^.glyph.layer.asInt();
      const layer2 = p2^.glyph.layer.asInt();
      return layer1 < layer2 || layer1 == layer2 && p1^.pos.y < p2^.pos.y;
  });
  for (elem : toRender) {
    elem^.glyph.render(context.canvas, ui^.getFontSize(), elem^.pos,
        state^.playerDir + elem^.projectileDir ?? 0.0, elem^.glyph.layer == GlyphLayer::OBJECT, 
        (elem^.pos - origin).length_d());
    if (ui^.showOutlines && elem^.radius > 0)
      context.canvas^.drawCircle(elem^.pos, elem^.radius, &color(150, 0, 0));
  }
  for (it : *data^.game^.getObjects()) {
    const obj = it^.get();
    mutable double? forceDir = null;
    if (obj == player && !obj^.ongoingAttack) {
      forceDir = state^.playerDir;
      if (!!state^.targetAngle)
        forceDir = *state^.targetAngle;
    }
    for (weapon : obj^.getAllWeaponPositions(forceDir))
      if (ui^.seeWholeMap || data^.game^.canSee(player, obj^.pos.as_int())) {
        const coord1 = origin + ui^.projectOnScreen(player, weapon^.pos1, state^.playerDir);
        const coord2 = origin + ui^.projectOnScreen(player, weapon^.pos2, state^.playerDir);
        const glyphCoord = origin + ui^.projectOnScreen(player,
            weapon^.pos1 + weapon^.glyphOffset.rotate(-weapon^.dir), state^.playerDir);
        if (to_draw.contains(&coord1)) {
          weapon^.glyph^.render(
              context.canvas, ui^.getFontSize(), glyphCoord, state^.playerDir - weapon^.dir - 3.14 / 4, false, 0);
          if (ui^.showOutlines)
            context.canvas^.drawLine(coord1, coord2, &color(255, 255, 255));
        }
        const dir = obj^.lastWalkDirection;
        if (ui^.showOutlines)
          for (i = 0.0; i < 1.0; i += 0.1) {
            const coord = origin + ui^.projectOnScreen(player, obj^.calculateMeleeAttackPosition(dir, i),
                state^.playerDir);
            context.canvas^.fillRectangle(&centered_rect(coord, 5), &color(0, 0, 255));
          }
      }
  }
  for (anim : data^.game^.getLevel()^.animations) {
    const coord = origin + ui^.projectOnScreen(player, anim^.position, state^.playerDir);
    if (to_draw.contains(&coord))
      switch (anim^.type) {
        case (explosion) {
          if (anim^.time + ui^.explosionDuration > curTime)
            Glyph("*", color(255, 100, 0), 0.5, GlyphLayer::EFFECT)
                .render(context.canvas, ui^.getFontSize(), coord, 0.0, false, 0);
        }
        case (blood) {
          if (anim^.time + ui^.woundedAnimDuration > curTime)
            drawBloodParticle(ui, context, coord, anim^.time, curTime, blood.col);
        }
        case (heal) {
          if (anim^.time + ui^.woundedAnimDuration > curTime)
            drawHeartParticle(ui, context, coord, anim^.time, curTime);
        }
      }
  }
  if (!player^.ongoingAttack && !!state^.targetAngle) {
    const dir = *state^.targetAngle;
    const coord = origin + ui^.projectOnScreen(player, player^.calculateMeleeAttackPosition(dir, 0.2),
        state^.playerDir);
    context.canvas^.fillRectangle(&centered_rect(coord, 5), &color(0, 0, 255));
  }
  if (const message = data^.game^.getMessage(player^.pos)) {
    const messagePos = origin + vec2(0, 60);
    const ctx = UIContext(context.canvas, &*message, context.state, context.timeDiff);
    const size = ui^.stairsMessage^.size(ctx);
    ui^.stairsMessage^.render(ctx, &rectangle(messagePos - size / 2, messagePos + size / 2));
  }
  if (!!data^.game^.status) {
    const ctx = UIContext(context.canvas, &"pok", context.state, context.timeDiff);
    const dialog = data^.game^.status == GameStatus::GAME_WON
        ? ui^.gameWonMessage.get()
        : ui^.gameOverMessage.get();
    const size = dialog^.size(ctx);
    const messagePos = origin - vec2(0, 100 + size.y);
    dialog^.render(ctx, &rectangle(messagePos - size / 2, messagePos + size / 2));
  }
}


