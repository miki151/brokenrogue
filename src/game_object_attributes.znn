
export import "creature.znn";
export import "glyph.znn";
export import "object_effect.znn";

export struct BoundingBox {
  double size;
};

export bool isPenetrated(BoundingBox* b, vec2d p) {
  return p.length_d() < b^.size / 2;
}

export vec2d? getRebound(BoundingBox* b, BoundingBox* other, vec2d p) {
  const l = p.length_d();
  const min_dist = (b^.size + other^.size) / 2;
  if (l < min_dist) {
    if (l < 0.001)
      return vec2d(min_dist, 0);
    return p-p / l * min_dist;
  }
  return null;
}

export BoundingBox implicit_copy(BoundingBox*) = default;

export struct GameObjectAttributes {
  Glyph? glyph = null;
  string name;
  BoundingBox? box = null;
  Creature? creature = null;
  bool blocksVision = false;
  double? maxHealth = null;
  bool canRemember = false;
  bool isStairs = false;
  bool isEndGameBoss = false;
  string? message = null;
  ObjectEffect? entryEffect = null;
  ObjectEffect? deathEffect = null;
  double? maxLifeTime = null;
  color bloodColor = color(255, 0, 0);
};

export GameObjectAttributes copy(GameObjectAttributes*) = default;
