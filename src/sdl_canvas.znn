
export import "ui_canvas.znn";
export import "sdl_window.znn";
import "std/io.znn";
import "sdl_ttf.znn";
export import "std/hash_map.znn";

export struct SDLCanvas {
  SDLWindow* window;
  SDLFont mutable* font;
  hash_map<string, sdl_texture> textures;
  sdl_texture textTexture;
};

export void fillRectangle(SDLCanvas* canvas, rectangle* r, color* color) {
  *canvas->window->filledRectangle(r, *color);
}

export void frameRectangle(SDLCanvas* canvas, rectangle* r, color* color, int width) {
  *canvas->window->outlinedRectangle(r, *color, 1);
}

export void drawLine(SDLCanvas* canvas, vec2 v1, vec2 v2, color* color) {
  *canvas->window->drawLine(v1, v2, *color);
}

export void drawCircle(SDLCanvas* canvas, vec2 center, int radius, color* color) {
  *canvas->window->drawCircle(center, radius, *color);
}

export void drawTexture(SDLCanvas* canvas, rectangle* r, string id, texture_flip flip) {
  if (const t = canvas->textures.get_maybe(&id))
    *canvas->window->blitFrom(r->v1, *t, r->size());
  else
    canvas->drawText(r->v1, "bad texture id: {id}", 10, &color(255, 0, 0));
}

export void drawTextureRotated(SDLCanvas* canvas, rectangle* r, string id, double angle, color* col) {
  if (const t = canvas->textures.get_maybe(&id))
    *canvas->window->blitFromRotated(r->v1, *t, r->size(), angle, *col);
  else
    canvas->drawText(r->v1, "bad texture id: {id}", 10, &color(255, 0, 0));
}

export vec2 getTextureSize(SDLCanvas* canvas, string id) {
  if (const t = canvas->textures.get_maybe(&id))
    return *(*t)->size();
  return vec2(100, 20);
}

export void drawText(SDLCanvas* canvas, vec2 pos, string text, int size, color* color) {
  *canvas->font->drawText(pos, size, *color, text);
}

export void drawRotatedText(SDLCanvas* canvas, vec2 pos, string text, int size, color* color, double angle) {
  *canvas->font->drawRotatedText(pos, size, *color, text, &canvas->textTexture, angle);
}

export vec2 getTextSize(SDLCanvas* canvas, string text, int size) {
  return *getTextSize(canvas->font, text, size);
}


