
export import "level_generator.znn";
import "pretty_input.znn";
import "std/io.znn";
import "game_object_attributes.znn";
import "ui/vec2.znn";

template <T> requires (T == LevelGeneratorMargins || T == LevelGenPredicateOn || T == LevelGenPredicateChance
    || T == LevelGeneratorMargin || T == LevelGeneratorPosition || T == LevelGeneratorFilter
    || T == LevelGeneratorPlaceElem || T == LevelGeneratorConnect || T == LevelGeneratorRepeat
    || T == LevelGenPredicateArea)
bool round_brackets(pretty_dummy_struct<T>) {
  return true;
}

template <T> requires read_data_overload<T>
vector<T>!string read_vector_parens(input_stream mutable* stream) {
  try stream^.expect("(");
  mutable ret = vector<T>();
  while (true) {
    if (stream^.expect(")"))
      break;
    if (!ret.empty())
      try stream^.expect(",");
    ret.push_back(try stream^.read_data<T>());
  }
  return move(ret);
}

LevelGeneratorSet!string read_data(input_stream mutable* stream, pretty_dummy_struct<LevelGeneratorSet>) {
  return LevelGeneratorSet(try read_vector_parens<string>(stream));
}

LevelGeneratorReset!string read_data(input_stream mutable* stream, pretty_dummy_struct<LevelGeneratorReset>) {
  return LevelGeneratorReset(try read_vector_parens<string>(stream));
}

LevelGeneratorRemove!string read_data(input_stream mutable* stream, pretty_dummy_struct<LevelGeneratorRemove>) {
  return LevelGeneratorRemove(try read_vector_parens<string>(stream));
}

LevelGeneratorChoose!string read_data(input_stream mutable* stream, pretty_dummy_struct<LevelGeneratorChoose>) {
  return LevelGeneratorChoose(try read_vector_parens<box<LevelGenerator>>(stream));
}

LevelGeneratorPlace!string read_data(input_stream mutable* stream, pretty_dummy_struct<LevelGeneratorPlace>) {
  const lastIndex = stream^.index;
  try stream^.expect("(");
  if (stream^.peek_string() == "(") {
    stream^.index = lastIndex;
    return LevelGeneratorPlace(try read_vector_parens<LevelGeneratorPlaceElem>(stream));
  } else {
    mutable ret = LevelGeneratorPlace(vector<LevelGeneratorPlaceElem>());
    stream^.index = lastIndex;
    ret.elems.push_back(try stream^.read_data<LevelGeneratorPlaceElem>());
    return move(ret);
  }
  try stream^.expect(")");
}

LevelGeneratorConnectElem!string read_data(input_stream mutable* stream,
    pretty_dummy_struct<LevelGeneratorConnectElem>) {
  const cost = try stream^.read_data<double?>();
  try stream^.expect(",");
  const pred = try stream^.read_data<box<LevelGenPredicate>>();
  try stream^.expect(",");
  const gen = try stream^.read_data<box<LevelGenerator>>();
  return LevelGeneratorConnectElem(cost, move(pred), move(gen));
}

LevelGeneratorConnect!string read_data(input_stream mutable* stream, pretty_dummy_struct<LevelGeneratorConnect>) {
  try stream^.expect("(");
  mutable ret = LevelGeneratorConnect(try stream^.read_data<box<LevelGenPredicate>>(),
      vector<LevelGeneratorConnectElem>());
  try stream^.expect(",");
  if (stream^.expect("(")) {
    while (true) {
      ret.elems.push_back(try stream^.read_data<LevelGeneratorConnectElem>());
      try stream^.expect(")");
      if (stream^.expect(","))
        try stream^.expect("(");
      else
        break;
    }
  } else
    ret.elems.push_back(try stream^.read_data<LevelGeneratorConnectElem>());
  try stream^.expect(")");
  return move(ret);
}

export vector<pair<vec2, box<LevelGenerator>>>!string readLevelGenerator(string content) {
  mutable stream = try create_input_stream(content);
  stream.add_concept_mapping<LevelGenPredicate, LevelGenPredicateOn>("On");
  stream.add_concept_mapping<LevelGenPredicate, LevelGenPredicateNot>("Not");
  stream.add_concept_mapping<LevelGenPredicate, LevelGenPredicateAnd>("And");
  stream.add_concept_mapping<LevelGenPredicate, LevelGenPredicateOr>("Or");
  stream.add_concept_mapping<LevelGenPredicate, LevelGenPredicateChance>("Chance");
  stream.add_concept_mapping<LevelGenPredicate, LevelGenPredicateArea>("Area");
  stream.add_concept_mapping<LevelGenerator, LevelGeneratorSet>("Set");
  stream.add_concept_mapping<LevelGenerator, LevelGeneratorReset>("Reset");
  stream.add_concept_mapping<LevelGenerator, LevelGeneratorRemove>("Remove");
  stream.add_concept_mapping<LevelGenerator, LevelGeneratorMargins>("Margins");
  stream.add_concept_mapping<LevelGenerator, LevelGeneratorMargin>("MarginImpl");
  stream.add_concept_mapping<LevelGenerator, LevelGeneratorPosition>("Position");
  stream.add_concept_mapping<LevelGenerator, LevelGeneratorFilter>("Filter");
  stream.add_concept_mapping<LevelGenerator, LevelGeneratorPlace>("Place");
  stream.add_concept_mapping<LevelGenerator, LevelGeneratorChoose>("Choose");
  stream.add_concept_mapping<LevelGenerator, LevelGeneratorConnect>("Connect");
  stream.add_concept_mapping<LevelGenerator, LevelGeneratorRepeat>("Repeat");
  stream.add_concept_mapping<LevelGenerator, LevelGeneratorChain>("\{", true);
  return stream.read_data<vector<pair<vec2, box<LevelGenerator>>>>();
}

bool round_brackets(pretty_dummy_struct<GameObjectAttributes>) {
  return true;
}

bool round_brackets(pretty_dummy_struct<Creature>) {
  return true;
}

export hash_map<string, GameObjectAttributes>!string readLevelMapping(string content) {
  mutable stream = try create_input_stream(content);
  return stream.read_data<hash_map<string, GameObjectAttributes>>();
}
