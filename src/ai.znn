
import "game.znn";
import "std/math.znn";
import "std/io.znn";
export import "std/vector.znn";
export import "std/box.znn";


bool canReachMelee(GameObject* obj, GameObject* target) {
  const dir = (target->pos - obj->pos).angle();
  return !!target->attributes.box &&
      target->attributes.box->isPenetrated(obj->getMaxMeleeAttackPosition(dir) + obj->pos - target->pos);
}

export struct AIAvoidMelee {};

export AIAvoidMelee copy(AIAvoidMelee*) = default;

export bool makeMove(AIAvoidMelee*, Game mutable* game, GameObject mutable* object, double timeDiff) {
  const obj = game->getPlayer();
  if (canReachMelee(obj, object) && !!obj->ongoingAttack) {
    const v = object->pos - obj->pos;
    discard object->advance(game, 4 * timeDiff, atan2(v.x, v.y));
    return true;
  }
  return false;
}

export struct AIMelee {};

export AIMelee copy(AIMelee*) = default;

export bool makeMove(AIMelee*, Game mutable* game, GameObject mutable* object, double) {
  if (!object->attributes.creature->meleeAttack)
    return false;
  const obj = game->getPlayer();
  return canReachMelee(object, obj) && object->addMeleeAttack((obj->pos - object->pos).angle());
}

export struct AIRanged {};

export AIRanged copy(AIRanged*) = default;

export bool makeMove(AIRanged*, Game mutable* game, GameObject mutable* object, double) {
  if (!object->attributes.creature->rangedAttack)
    return false;
  const obj = game->getPlayer();
  return game->canSee(object, obj->pos.as_int()) && game->addRangedAttack(object, (obj->pos - object->pos).angle());
}

export struct AIPathfind {};
export AIPathfind copy(AIPathfind*) = default;

export bool makeMove(AIPathfind*, Game mutable* game, GameObject mutable* object, double timeDiff) {
  const obj = game->getPlayer();
  return game->canSee(object, obj->pos.as_int())
      && !canReachMelee(object, obj)
      && !!object->advance(game, 4 * timeDiff, (obj->pos - object->pos).angle());
}

export struct AIFirst {
  vector<AI> elems;
};
export AIFirst copy(AIFirst*) = default;

export bool makeMove(AIFirst* first, Game mutable* game, GameObject mutable* object, double timeDiff) {
  for (elem : first->elems)
    if (elem->makeMove(game, object, timeDiff))
      return true;
  return false;
}

export union AI {
  AIMelee melee;
  AIRanged ranged;
  AIAvoidMelee avoidMelee;
  AIPathfind pathfind;
  AIFirst first;
};

export AI copy(AI*) = default;

export bool makeMove(virtual AI*, Game mutable* game, GameObject mutable* object, double timeDiff);

