
import "game.znn";
import "std/math.znn";
import "std/io.znn";
import "game_object.znn";
export import "std/vector.znn";
export import "std/box.znn";

bool canReachMelee(GameObject* obj, GameObject* target, int? attackIndex) {
  const dir = (target^.pos - obj^.pos).get_angle();
  // Test some intermediate points in case we can reach beyond the target.
  for (i = 0.0; i <= 1.0; i += 0.03) {
    const pos = !!attackIndex
        ? obj^.calculateMeleeAttackPosition(*attackIndex, dir, i)
        : obj^.calculateMeleeAttackPosition(dir, i);
    if (target^.isPenetrated(pos))
      return true;
  }
  return false;
}

export struct AIAvoidMelee {};

AIAvoidMelee copy(AIAvoidMelee*) = default;

bool makeMove(AIAvoidMelee*, Game mutable* game, GameObject mutable* object, double timeDiff) {
  const obj = game^.getPlayer();
  if (canReachMelee(obj, object, null) && !!obj^.ongoingAttack) {
    const dir = (object^.pos - obj^.pos).get_angle();
    discard object^.walk(game, timeDiff, dir, -dir);
    return true;
  }
  return false;
}

export struct AIMelee {};

AIMelee copy(AIMelee*) = default;

bool makeMove(AIMelee*, Game mutable* game, GameObject mutable* object, double) {
  if (!object^.ongoingAttack)
    for (attack : object^.attributes.creature^.meleeAttack)
      if (object^.lastAttackIndex != attack.index || object^.attributes.creature^.meleeAttack.size() == 1) {
        const obj = game^.getPlayer();
        if (canReachMelee(object, obj, attack.index) &&
            object^.addMeleeAttack((obj^.pos - object^.pos).get_angle(), attack.index))
          return true;
      }
  return false;
}

export struct AIAdjustMelee {};

AIAdjustMelee copy(AIAdjustMelee*) = default;

bool makeMove(AIAdjustMelee*, Game mutable* game, GameObject mutable* object, double timeDiff) {
  const obj = game^.getPlayer();
  if (!!object^.ongoingAttack && canReachMelee(object, obj, null)) {
    const angle = (obj^.pos - object^.pos).get_angle();
    if (angle > object^.ongoingAttack^.dir + 0.1) {
      discard object^.walk(game, timeDiff, angle + 1.57, angle);
      return true;
    }
    if (angle < object^.ongoingAttack^.dir - 0.1) {
      discard object^.walk(game, timeDiff, angle - 1.57, angle);
      return true;
    }
  }
  return false;
}

export struct AIRanged { int maxDist; };

AIRanged copy(AIRanged*) = default;

bool makeMove(AIRanged* ai, Game mutable* game, GameObject mutable* object, double) {
  if (!object^.attributes.creature^.rangedAttack)
    return false;
  const obj = game^.getPlayer();
  const canSee = game^.canSee(object, obj^.pos.as_int());
  const dir = obj^.pos - object^.pos;
  if (canSee && object^.rangedAttackTimeout <= 0.5)
    object^.lastWalkDirection = dir.get_angle();
  return dir.length_d() <= ai^.maxDist && canSee &&
      game^.addRangedAttack(object, dir.get_angle());
}

export struct AIStopWhenInMeleeRange {};

AIStopWhenInMeleeRange copy(AIStopWhenInMeleeRange*) = default;

bool makeMove(AIStopWhenInMeleeRange*, Game mutable* game, GameObject mutable* object, double timeDiff) {
  const obj = game^.getPlayer();
  return canReachMelee(object, obj, null);
}

export struct AIPathfind {};

AIPathfind copy(AIPathfind*) = default;

bool makeMove(AIPathfind*, Game mutable* game, GameObject mutable* object, double timeDiff) {
  const obj = game^.getPlayer();
  return game^.canSee(object, obj^.pos.as_int())
      && !!object^.walk(game, timeDiff, (obj^.pos - object^.pos).get_angle(), null);
}

export struct AIKeepDistance {
  double dist;
};

AIKeepDistance copy(AIKeepDistance*) = default;

bool makeMove(AIKeepDistance* ai, Game mutable* game, GameObject mutable* object, double timeDiff) {
  const obj = game^.getPlayer();
  return game^.canSee(object, obj^.pos.as_int()) && (obj^.pos - object^.pos).length_d() < ai^.dist
      && !!object^.walk(game, timeDiff, (object^.pos - obj^.pos).get_angle(), null);
}

export struct AICircle {};

AICircle copy(AICircle*) = default;

bool makeMove(AICircle*, Game mutable* game, GameObject mutable* object, double timeDiff) {
  const obj = game^.getPlayer();
  return game^.canSee(object, obj^.pos.as_int())
      && !canReachMelee(object, obj, null)
      && !!object^.walk(game, timeDiff, (obj^.pos - object^.pos).get_angle() + 1.57, null)
      && false;
}

export struct AIAll {
  vector<AI> elems;
};

AIAll copy(AIAll*) = default;

bool makeMove(AIAll* first, Game mutable* game, GameObject mutable* object, double timeDiff) {
  mutable res = false;
  for (elem : first^.elems)
    res = elem^.makeMove(game, object, timeDiff) || res;
  return res;
}

export struct AIFirst {
  vector<AI> elems;
};

AIFirst copy(AIFirst*) = default;

bool makeMove(AIFirst* first, Game mutable* game, GameObject mutable* object, double timeDiff) {
  for (elem : first^.elems)
    if (elem^.makeMove(game, object, timeDiff))
      return true;
  return false;
}

export union AI {
  AIMelee melee;
  AIRanged ranged;
  AIAvoidMelee avoidMelee;
  AIKeepDistance keepDistance;
  AIAdjustMelee adjustMelee;
  AIPathfind pathfind;
  AIStopWhenInMeleeRange stopWhenInMeleeRange;
  AICircle circle;
  AIAll all;
  AIFirst first;
};

export AI copy(AI*) = default;

export bool makeMove(virtual AI*, Game mutable* game, GameObject mutable* object, double timeDiff);
