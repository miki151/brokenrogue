
import "game.znn";
import "std/math.znn";
import "std/io.znn";
export import "std/vector.znn";
export import "std/box.znn";


bool canReachMelee(GameObject* obj, GameObject* target) {
  const dir = (target->pos - obj->pos).get_angle();
  // Test some intermediate points in case we can reach beyond the target.
  for (i = 0.0; i <= 1.0; i += 0.1)
    if (target->isPenetrated(obj->getMaxMeleeAttackPosition(dir) * i + obj->pos * (1.0 - i)))
      return true;
  return false;
}

export struct AIAvoidMelee {};

export AIAvoidMelee copy(AIAvoidMelee*) = default;

export bool makeMove(AIAvoidMelee*, Game mutable* game, GameObject mutable* object, double timeDiff) {
  const obj = game->getPlayer();
  if (canReachMelee(obj, object) && !!obj->ongoingAttack) {
    const dir = (object->pos - obj->pos).get_angle();
    discard object->walk(game, timeDiff, dir, -dir);
    return true;
  }
  return false;
}

export struct AIMelee {};

export AIMelee copy(AIMelee*) = default;

export bool makeMove(AIMelee*, Game mutable* game, GameObject mutable* object, double) {
  if (!object->attributes.creature->meleeAttack)
    return false;
  const obj = game->getPlayer();
  return canReachMelee(object, obj) && object->addMeleeAttack((obj->pos - object->pos).get_angle());
}

export struct AIAdjustMelee {};

export AIAdjustMelee copy(AIAdjustMelee*) = default;

export bool makeMove(AIAdjustMelee*, Game mutable* game, GameObject mutable* object, double timeDiff) {
  const obj = game->getPlayer();
  if (!!object->ongoingAttack && canReachMelee(object, obj)) {
    const angle = (obj->pos - object->pos).get_angle();
    if (angle > object->ongoingAttack->dir + 0.1) {
      discard object->walk(game, timeDiff, angle + 1.57, angle);
      return true;
    }
    if (angle < object->ongoingAttack->dir - 0.1) {
      discard object->walk(game, timeDiff, angle - 1.57, angle);
      return true;
    }
  }
  return false;
}

export struct AIRanged { int maxDist; };

export AIRanged copy(AIRanged*) = default;

export bool makeMove(AIRanged* ai, Game mutable* game, GameObject mutable* object, double) {
  if (!object->attributes.creature->rangedAttack)
    return false;
  const obj = game->getPlayer();
  return (obj->pos - object->pos).length_d() <= ai->maxDist && 
      game->canSee(object, obj->pos.as_int()) &&
      game->addRangedAttack(object, (obj->pos - object->pos).get_angle());
}

export struct AIPathfind {};
export AIPathfind copy(AIPathfind*) = default;

export bool makeMove(AIPathfind*, Game mutable* game, GameObject mutable* object, double timeDiff) {
  const obj = game->getPlayer();
  return game->canSee(object, obj->pos.as_int())
      && !canReachMelee(object, obj)
      && !!object->walk(game, timeDiff, (obj->pos - object->pos).get_angle(), null);
}

export struct AICircle {};
export AICircle copy(AICircle*) = default;

export bool makeMove(AICircle*, Game mutable* game, GameObject mutable* object, double timeDiff) {
  const obj = game->getPlayer();
  return game->canSee(object, obj->pos.as_int())
      && !canReachMelee(object, obj)
      && !!object->walk(game, timeDiff, (obj->pos - object->pos).get_angle() + 1.57, null)
      && false;
}

export struct AIAll {
  vector<AI> elems;
};
export AIAll copy(AIAll*) = default;

export bool makeMove(AIAll* first, Game mutable* game, GameObject mutable* object, double timeDiff) {
  mutable res = false;
  for (elem : first->elems)
    res = elem->makeMove(game, object, timeDiff) || res;
  return res;
}

export struct AIFirst {
  vector<AI> elems;
};
export AIFirst copy(AIFirst*) = default;

export bool makeMove(AIFirst* first, Game mutable* game, GameObject mutable* object, double timeDiff) {
  for (elem : first->elems)
    if (elem->makeMove(game, object, timeDiff))
      return true;
  return false;
}

export union AI {
  AIMelee melee;
  AIRanged ranged;
  AIAvoidMelee avoidMelee;
  AIAdjustMelee adjustMelee;
  AIPathfind pathfind;
  AICircle circle;
  AIAll all;
  AIFirst first;
};

export AI copy(AI*) = default;

export bool makeMove(virtual AI*, Game mutable* game, GameObject mutable* object, double timeDiff);

