export import "std/box.znn";
export import "std/random.znn";

import "game_object.znn";

export struct TypeFilter {
  string value;
};

export TypeFilter copy(TypeFilter*) = default;

export bool apply(TypeFilter* type, GameObject* object) {
  return object^.attributesId == type^.value;
}

export struct ChanceFilter {
  double value;
};

export ChanceFilter copy(ChanceFilter*) = default;

export bool apply(ChanceFilter* type, GameObject* object) {
  return get_random_d() <= type^.value;
}

export struct NotFilter {
  box<ObjectFilter> filter;
};

export NotFilter copy(NotFilter*) = default;

export bool apply(NotFilter* type, GameObject* object) {
  return !type^.filter^.apply(object);
}

export union ObjectFilter {
  TypeFilter type;
  ChanceFilter chance;
  NotFilter negate;
};

export ObjectFilter copy(ObjectFilter*) = default;

export bool apply(virtual ObjectFilter*, GameObject* object);
