
import "ai.znn";
import "sdl.znn";
import "sdl_surface.znn";
import "sdl_canvas.znn";
import "ui.znn";
import "std/io.znn";
import "ui_reader.znn";
import "sdl_ttf.znn";
import "ui_data.znn";
import "game.znn";
import "std/enum_set.znn";
import "std/enum.znn";
import "std/time.znn";
import "std/flags.znn";
import "fps_meter.znn";
import "game_level_ui.znn";
import "level_generator_reader.znn";
import "std/random.znn";
import "std/panic.znn";

struct Y {
  int u;
};

struct X {
  int a;
  bool b;
  Y y;
};

hash_map<string, sdl_texture> loadTextures(SDLWindow* window) {
  mutable ret = hash_map<string, sdl_texture>();
//  ret.insert("tex1", *sdlLoadBMP("texture1.bmp")->to_texture(window));
  return move(ret);
}

box<UIElement>!string readUIFrom(string path) {
  return read_ui(*open_file_r(path)->read_content());
}

struct Flags {
  string? font;
  bool noPanicHandler;
};

template <Types...> requires copy<Types>...
UIRecord createRecord(string[] names, Types... values) {
  mutable ret = UIRecord();
  static for (i = 0; i < countof(values); ++i) {
    ret.data.insert(names[i], values...[i].copy().box_as<any>());
  }
  return move(ret);
}

void insertCreatureInfo(UIRecord mutable* record, string field, double hp, string name, Glyph* glyph) {
  mutable creatureData = UIRecord();
  creatureData.data.insert("hp", hp.box_as<any>());
  creatureData.data.insert("name", name.box_as<any>());
  creatureData.data.insert("glyph", createRecord({"text", "color"}.slice(), glyph->sym, glyph->col.copy())
      .box_as<any>());
  record->data.insert(field, move(creatureData).box_as<any>());
}

void showDialog(SDLWindow* window, SDLCanvas* canvas, rectangle* rect, UIElement* ui, string message) {
  mutable uiData = UIRecord();
  mutable uiState = UIState();
  ui->render(UIContext(canvas, &createRecord({"dialog_text"}.slice(), message), &uiState, 0.0), rect);
  window->update();
}

int main(string[] args) {
  const flags = *read_flags<Flags>(args);
  const panic_handler = [](string s) { printf("{s}\n"); exit(0); };
  if (!flags.noPanicHandler)
    set_panic_handler(&panic_handler);
  *sdl_init();
  init_random();
  mutable ui = *readUIFrom("ui.txt");
  const window = *sdl_create_window(vec2(1280, 720), "Infinihack");
  *sdlSetRelativeMouseMode(true);
  mutable font = *window.loadSDLFont(flags.font ?? "font.ttf", 10, 100);
  const textTexture = *window.make_target_texture(vec2(100, 100));
  const canvas = SDLCanvas(&window, &font, loadTextures(&window), move(textTexture));
  const ui_rectangle = rectangle(vec2(0, 0), window.size());
  const levelGen = *readLevelGenerator(*open_file_r("levelgen.txt")->read_content());
  mutable levelMapping = *readLevelMapping(*open_file_r("levelmapping.txt")->read_content());
  showDialog(&window, &canvas, &ui_rectangle, ui.get(), "Generating levels...");
  const getNewGame = [&] {
    return Game(10, levelGen.transform([](pair<vec2, box<LevelGenerator>>* g) {
          return pair(g->first, g->second.get()); }), &levelMapping);
  };
  mutable game = getNewGame();
  mutable exit = false;
  mutable timeDiff = 0.0;
  mutable last_update = current_time_milli();
  mutable realTimeEnd = last_update;
  const timeSpentCallback = [&] (int time) { realTimeEnd = max(realTimeEnd, last_update + time); };
  mutable HighlightedObjectInfo? highlightedObjectInfo = null; 
  const highlightedObjectCallback = [&] (HighlightedObjectInfo? info) { highlightedObjectInfo = info.copy(); };
  const game_data = GameLevelUIData(
      &game,
      &timeSpentCallback,
      &highlightedObjectCallback
  );
  mutable uiData = UIRecord();
  mutable uiState = UIState();
  uiData.data.insert("game_level", box_as<any>(move(game_data)));
  mutable events_state = SDLEventsState();
  uiData.data.insert("exit_callback", [&exit] { exit = true; }.box_as<UICallback>().box_as<any>());
  mutable fps = fps_meter();
  while (!exit) {
    fps.add_tick();
    uiData.data.insert("fps", "{fps.get_fps()}".box_as<any>());
    if (!!game.status && !uiData.data.contains(&game.status->asString())) {
      mutable boxData = UIRecord();
      boxData.data.insert("exit_callback", [&exit] { exit = true; }.box_as<UICallback>().box_as<any>());
      boxData.data.insert("restart_callback", [&] {
          showDialog(&window, &canvas, &ui_rectangle, ui.get(), "Generating level...");
          uiData.data.erase(&game.status->asString());
          game = getNewGame();
          last_update = current_time_milli();
          realTimeEnd = last_update;
      }.box_as<UICallback>().box_as<any>());
      uiData.data.insert(game.status->asString(), move(boxData).box_as<any>());
    }
    insertCreatureInfo(&uiData, "player_info", 
        max(0.0, *game.getPlayer()->health / *game.getPlayer()->attributes.maxHealth), "Player",
            &game.getPlayer()->attributes.glyph);
    if (highlightedObjectInfo)
      insertCreatureInfo(&uiData, "enemy_info", highlightedObjectInfo->hp, highlightedObjectInfo->name,
          &highlightedObjectInfo->glyph);
    else
      uiData.data.erase(&"enemy_info");
    const cur_time = current_time_milli();
    timeDiff = 0.001 * (cur_time - last_update);
    if (cur_time <= realTimeEnd)
      game.advance(timeDiff);
    last_update = cur_time;
    const context = UIContext(&canvas, &uiData, &uiState, timeDiff);
    for (event : events_state.getEvents()) {
      if (exit)
        break;
      switch (*event) {
        case (quit) { return 0; }
        case (key) {
          if (key == key_event(key_type::F1, key_event_type::DOWN)) {
            if (const res = readUIFrom("ui.txt"))
              ui = *move(res);
            else
              printf(res.get_error());
            if (const res2 = readLevelMapping(*open_file_r("levelmapping.txt")->read_content())) {
              levelMapping = *move(res2);
              game.reloadObjectAttributes(&levelMapping);
            } else
              printf(res2.get_error());
          } else
            discard ui->onKeyEvent(context, &ui_rectangle, &key);
        }
        case (mouse) {
          discard ui->onMouseEvent(context, &ui_rectangle, &mouse);
        }
        default {}
      }
    }
    ui->render(context, &ui_rectangle);
    window.update();
  }
  return 0;
}
