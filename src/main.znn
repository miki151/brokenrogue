
import "ai.znn";
import "sdl/sdl.znn";
import "sdl/surface.znn";
import "sdl/canvas.znn";
import "ui/ui.znn";
import "std/io.znn";
import "ui/reader.znn";
import "sdl/ttf.znn";
import "ui/data.znn";
import "game.znn";
import "std/enum_set.znn";
import "std/enum.znn";
import "std/time.znn";
import "std/flags.znn";
import "fps_meter.znn";
import "game_level_ui.znn";
import "level_generator_reader.znn";
import "std/random.znn";
import "std/panic.znn";
import "pretty_input.znn";
import "game_object.znn";

vector<pair<string, string>>!string readGameSprites(string path) {
  mutable stream = try create_input_stream(try read_content(&try open_file_r(path)));
  return stream.read_data<vector<pair<string, string>>>();

}

hash_map<string, sdl_texture> loadTextures(SDLWindow* window, string spriteDir,
    vector<pair<string, string>> spriteMap) {
  mutable ret = hash_map<string, sdl_texture>();
  for (elem : spriteMap)
    ret.insert(elem^.first, *sdlLoadBMP(spriteDir + "/" + elem^.second + ".bmp")^.to_texture(window));
//  ret.insert("tex1", *sdlLoadBMP("texture1.bmp")^.to_texture(window));
  return move(ret);
}

export bool round_brackets(pretty_dummy_struct<GameLevelUI>) {
  return true;
}

box<UIElement>!string readUIFrom(string path) {
  mutable stream = try create_input_stream(try read_content(&try open_file_r(path)));
  stream.add_concept_mapping<UIElement, GameLevelUI>("game_level");
  stream.register_ui_elems();
  return stream.read_data<box<UIElement>>();
}

struct Flags {
  string? font;
  double? realTimeFlow;
};

template <Types...> requires copy<Types>...
UIRecord createRecord(string[] names, Types... values) {
  mutable ret = UIRecord();
  static for (i = 0; i < countof(values); ++i) {
    ret.insert(names[i], values...[i].copy().box_as<any>());
  }
  return move(ret);
}

void insertCreatureInfo(UIRecord mutable* record, string field, double hp, string name, Glyph* glyph) {
  mutable creatureData = UIRecord();
  creatureData.insert("hp", hp.box_as<any>());
  creatureData.insert("name", name.box_as<any>());
  creatureData.insert("glyph", createRecord({"id", "color"}.slice(), glyph^.sym, glyph^.col.copy())
      .box_as<any>());
  record^.insert(field, move(creatureData).box_as<any>());
}

void showDialog(SDLWindow* window, SDLCanvas* canvas, rectangle* rect, UIElement* ui, string message) {
  mutable uiData = UIRecord();
  mutable uiState = UIState();
  ui^.render(UIContext(canvas, &createRecord({"dialog_text"}.slice(), message), &uiState, 0.0), rect);
  window^.update();
}

template <T>
T orExit(expected<T, string> elem) {
  if (!elem) {
    printf("{elem.get_error()}\n");
    exit(0);
  }
  return *move(elem);
}

int main(string[] args) {
  const flags = read_flags<Flags>(args).orExit();
  sdl_init().orExit();
  init_random();
  mutable ui = readUIFrom("ui.txt").map_error([](string err) { return "Error reading ui.txt: " + err;}).orExit();
  const window = sdl_create_window(vec2(1280, 720), "Broken Rogue", "icon.png", false).orExit();
  mutable font = window.loadSDLFont(flags.font ?? "font.ttf", 10, 100).orExit();
  const getCanvas = [&] {
    const textTexture = window.make_target_texture(vec2(100, 100)).orExit();
    const gameSprites = readGameSprites("sprites.txt").orExit();
    return SDLCanvas(&window, &font, loadTextures(&window, "sprites", move(gameSprites)), move(textTexture));
  };
  mutable canvas = getCanvas();
  const ui_rectangle = rectangle(vec2(0, 0), window.size());
  const content = read_content(&open_file_r("levelgen.txt").orExit()).orExit();
  const levelGen = readLevelGenerator(move(content)).map_error([](string err) {
    return "Error reading levelgen.txt: " + err;
  }).orExit();
  mutable levelMapping = readLevelMapping(*open_file_r("levelmapping.txt")^.read_content()).map_error([](string err) {
    return "Error reading levelmapping.txt: " + err;
  }).orExit();
  showDialog(&window, &canvas, &ui_rectangle, ui.get(), "Generating levels...");
  const getNewGame = [&] {
    return Game(20, levelGen.transform([](pair<vec2, box<LevelGenerator>>* g) {
          return pair(g^.first, g^.second.get()); }), &levelMapping);
  };
  mutable game = getNewGame();
  mutable exit = false;
  mutable timeDiff = 0.0;
  mutable last_update = current_time_milli();
  mutable realTimeEnd = last_update;
  mutable timeFlow = 1.0;
  const timeSpentCallback = [&] (double flow, int time) {
    timeFlow = flow;
    realTimeEnd = max(realTimeEnd, last_update + time);
  };
  mutable HighlightedObjectInfo? highlightedObjectInfo = null;
  const highlightedObjectCallback = [&] (HighlightedObjectInfo? info) { highlightedObjectInfo = info.copy(); };
  mutable uiData = UIRecord();
  mutable uiState = UIState();
  const restartCallback = [&] {
    showDialog(&window, &canvas, &ui_rectangle, ui.get(), "Generating levels...");
    uiData.erase(&game.status^.asString());
    game = getNewGame();
    last_update = current_time_milli();
    realTimeEnd = last_update;
  };
  const game_data = GameLevelUIData(
      &game,
      &timeSpentCallback,
      &highlightedObjectCallback,
      &restartCallback
  );
  uiData.insert("game_level", box_as<any>(move(game_data)));
  mutable events_state = SDLEventsState();
  *events_state.setRelativeMouseMode(true);
  uiData.insert("exit_callback", [&exit] { exit = true; }.box_as<UICallback>().box_as<any>());
  mutable fps = fps_meter();
  while (!exit) {
    fps.add_tick();
    uiData.insert("fps", "{fps.get_fps()}".box_as<any>());
    const player = game.getPlayer();
    const playerDead = !player^.health;
    if (!playerDead)
      insertCreatureInfo(&uiData, "player_info",
          max(0.0, *player^.health / *player^.attributes.maxHealth), "Player", &*player^.attributes.glyph);
    else
      uiData.erase(&"player_info");
    if (highlightedObjectInfo)
      insertCreatureInfo(&uiData, "enemy_info", highlightedObjectInfo^.hp, highlightedObjectInfo^.name,
          &highlightedObjectInfo^.glyph);
    else
      uiData.erase(&"enemy_info");
    const cur_time = current_time_milli();
    timeDiff = 0.001 * (cur_time - last_update);
    if (cur_time <= realTimeEnd || playerDead)
      game.advance(timeDiff / timeFlow);
    else if (flags.realTimeFlow)
      game.advance(timeDiff * *flags.realTimeFlow);
    last_update = cur_time;
    const context = UIContext(&canvas, &uiData, &uiState, timeDiff);
    for (event : events_state.getEvents()) {
      if (exit)
        break;
      switch (*event) {
        case (quit) { return 0; }
        case (key) {
          if (key.key == key_type::F1 && key.type == key_event_type::DOWN) {
            canvas = getCanvas();
            if (const res = readUIFrom("ui.txt"))
              ui = *move(res);
            else
              printf(res.get_error());
            if (const res2 = readLevelMapping(*open_file_r("levelmapping.txt")^.read_content())) {
              levelMapping = *move(res2);
              game.reloadObjectAttributes(&levelMapping);
            } else
              printf(res2.get_error());
          } else
            discard ui^.onKeyEvent(context, &ui_rectangle, &key);
        }
        case (mouse) {
          discard ui^.onMouseEvent(context, &ui_rectangle, &mouse);
        }
        default {}
      }
    }
    ui^.render(context, &ui_rectangle);
    window.update();
  }
  return 0;
}
