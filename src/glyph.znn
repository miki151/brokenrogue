
export import "color.znn";
export import "ui_canvas.znn";
import "std/range.znn";
import "std/math.znn";
import "std/io.znn";
import "std/random.znn";

export enum GlyphLayer {
  FLOOR,
  ITEM,
  OBJECT,
  EFFECT
};

export struct Glyph {
  string sym;
  color col;
  double size;
  GlyphLayer layer;
};

export void switchToMemory(Glyph mutable* glyph) {
  const avg = (glyph^.col.r + glyph^.col.g + glyph^.col.b) / 3;
  glyph^.col = color(avg, avg, avg);
}

export Glyph(string, color, double, GlyphLayer layer) = default;

export Glyph(string c, color col, GlyphLayer layer) {
  return Glyph(c, col, 1.0, layer);
}

export Glyph copy(Glyph*) = default;

export Glyph randomizeColor(Glyph* g, int variance) {
  mutable ret = g^.copy();
  if (variance > 0) {
    ret.col.r = max(0, min(255, ret.col.r + get_random(variance + 1) - variance / 2));
    ret.col.g = max(0, min(255, ret.col.g + get_random(variance + 1) - variance / 2));
    ret.col.b = max(0, min(255, ret.col.b + get_random(variance + 1) - variance / 2));
  }
  return move(ret);
}

export void render(Glyph* g, UICanvas* canvas, int font_size, vec2 pos, double angle, bool creature, double dist) {
  const size = (vec2d(font_size.as_double(), font_size.as_double()) * g^.size).as_int();
  const col = g^.col.lighter((-dist / 8).as_int());
  canvas^.drawTextureRotated(&rectangle(pos - size / 2, pos + size / 2), g^.sym, creature ? 0.0 : angle, &col);
}

