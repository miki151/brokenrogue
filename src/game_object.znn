
export import "game_object_attributes.znn";
export import "game_object_animation.znn";
export import "ui/vec2.znn";
export import "std/range.znn";
export import "melee_attack.znn";
import "std/math.znn";
export import "table.znn";
export import "projectile.znn";
export import "std/hash_set.znn";

export struct MeleeWeaponPosition {
  vec2d pos1;
  vec2d pos2;
  double dir;
  Glyph* glyph;
  vec2d glyphOffset;
};

double transformWeaponState(double state, MeleeWeaponOrigin origin){
  const peak = [origin] {
    switch (origin) {
      case (LEFT, RIGHT, CENTER) { return 0.2; }
      case (LEFT_SWING, RIGHT_SWING) { return 0.5; }
    }
  }();
  if (state <= peak)
    return 0.5 * state / peak;
  else
    return 0.5 * (1 + (state - peak) / (1 - peak));
}

MeleeWeaponPosition getWeaponPosition(GameObject* object, MeleeWeaponOrigin origin, mutable double dir,
    double state1, double reach, double length, Glyph* glyph, vec2d glyphOffset) {
  const state = transformWeaponState(state1, origin);
  mutable offsetV = vec2d(0, 0);
  const offset = object^.attributes.box^.size / 2.2;
  switch (origin) {
    case (LEFT) {
      offsetV = from_polar(dir - 1.57, offset);
      dir += atan2(offset, length) / 2;
    }
    case (RIGHT) {
      offsetV = from_polar(dir + 1.57, offset);
      dir -= atan2(offset, length) / 2;
    }
    case (CENTER) {
      offsetV = from_polar(dir, offset / 2.0);
    }
    case (LEFT_SWING) {
      const origDir = dir;
      dir += -1.57 + min(1.0, state * 1.2) * 3.14;
      offsetV = from_polar(dir, offset);
      dir = origDir + (dir - origDir) * 2.0;
    }
    case (RIGHT_SWING) {
      const origDir = dir;
      dir += 1.57 - min(1.0, state * 1.2) * 3.14;
      offsetV = from_polar(dir, offset);
      dir = origDir + (dir - origDir) * 2.0;
    }
  }
  return MeleeWeaponPosition(
      object^.pos + offsetV + from_polar(dir, reach * (1 - 2 * abs(state - 0.5))),
      object^.pos + offsetV + from_polar(dir, (reach * (1 - 2 * abs(state - 0.5)) + length)),
      -dir, glyph, glyphOffset
  );
}

export MeleeWeaponPosition? getRangedWeaponPosition(GameObject* object, double? forceDir) {
  if (!object^.attributes.creature || !object^.attributes.creature^.rangedAttack ||
      !object^.attributes.creature^.rangedAttack^.weaponGlyph)
    return null;
  const attack = &*object^.attributes.creature^.rangedAttack^.weaponGlyph;
  return getWeaponPosition(object, attack^.origin, forceDir ?? object^.lastWalkDirection, 0, 0.0,
      attack^.length, &attack^.glyph, attack^.glyphOffset);
}

export vector<MeleeWeaponPosition> getMeleeWeaponPosition(GameObject* object, double? forceDir) {
  mutable ret = vector<MeleeWeaponPosition>();
  if (!object^.attributes.creature)
    return move(ret);
  for (attack : object^.attributes.creature^.meleeAttack) {
    const state = (!object^.ongoingAttack || object^.lastAttackIndex != attack.index) ? 0
      : 1 - object^.ongoingAttack^.remainingTime / object^.ongoingAttack^.attack.duration;
    mutable dir = (forceDir ?? (!object^.ongoingAttack ? object^.lastWalkDirection : object^.ongoingAttack^.dir));
    ret.push_back(getWeaponPosition(object, object^.currentOrigin ?? attack^.origin, dir, state, attack^.reach,
      attack^.length, &attack^.glyph, attack^.glyphOffset));
  }
  return move(ret);
}

export void updateWeaponOrigin(GameObject mutable* object, int index) {
  const current = object^.currentOrigin ?? object^.attributes.creature^.meleeAttack[index].origin;
  switch (current) {
    case (LEFT_SWING) { object^.currentOrigin = MeleeWeaponOrigin::RIGHT_SWING; }
    case (RIGHT_SWING) { object^.currentOrigin = MeleeWeaponOrigin::LEFT_SWING; }
    default {}
  }
}

export vector<MeleeWeaponPosition> getAllWeaponPositions(GameObject* object, double? forceDir) {
  mutable ret = object^.getMeleeWeaponPosition(forceDir);
  if (const r = object^.getRangedWeaponPosition(forceDir))
    ret.push_back(*move(r));
  return move(ret);
}

export vec2d calculateMeleeAttackPosition(GameObject* object, int index, double dir, double state) {
  const attack = &object^.attributes.creature^.meleeAttack[index];
  return getWeaponPosition(object, attack^.origin, dir, state, attack^.reach, attack^.length,
      &attack^.glyph, attack^.glyphOffset).pos2;
}

export vec2d calculateMeleeAttackPosition(GameObject* object, double dir, double state) {
  if (object^.attributes.creature^.meleeAttack.empty())
    return object^.pos;
  return object^.calculateMeleeAttackPosition(0, dir, state);
}

export bool isPenetrated(GameObject* object, vec2d pos) {
  return !!object^.attributes.box && object^.attributes.box^.isPenetrated(pos - object^.pos);
}

export struct MeleeAttackInfo {
  MeleeAttack attack;
  double remainingTime;
  double dir;
  hash_set<int> woundedObjects;
};

export struct FOVInfo {
  vec2 origin;
  table<int> data;
};

export struct GameObject {
  int id;
  vec2d pos;
  GameObjectAnimation animation = GameObjectAnimation();
  GameObjectAttributes attributes;
  string? attributesId;
  MeleeAttackInfo? ongoingAttack = null;
  int? lastAttackIndex = null;
  double rangedAttackTimeout = 0;
  int rangedAttackProjectileCount = 0;
  FOVInfo? fovInfo = null;
  Projectile? projectile = null;
  double? health;
  bool remember = false;
  double lastWalkDirection = 0;
  MeleeWeaponOrigin? currentOrigin = null;
  bool isDead = false;
  double lifeTime = 0.0;
};

export GameObject(int id, vec2d pos, GameObjectAttributes attr, string? attributesId) {
  const health = attr.maxHealth;
  mutable rangedTimeout = 0.0;
  if (!!attr.creature && !!attr.creature^.rangedAttack)
    rangedTimeout = attr.creature^.rangedAttack^.timeout / 2;
  return GameObject::GameObject(
      .id = id,
      .pos = pos,
      .attributes = move(attr),
      .attributesId = attributesId,
      .rangedAttackTimeout = rangedTimeout,
      .health = health
  );
}

export bool addMeleeAttack(GameObject mutable* o, double direction, int index) {
  if (!o^.ongoingAttack && !!o^.attributes.creature && index < o^.attributes.creature^.meleeAttack.size()) {
    const attack = &o^.attributes.creature^.meleeAttack[index];
    const duration = attack^.duration;
    o^.ongoingAttack = MeleeAttackInfo(attack^.copy(), duration, direction, hash_set<int>());
    o^.lastAttackIndex = index;
    return true;
  }
  return false;
}

export vec2d? getRebound(GameObject* o1, GameObject* o2) {
  if (!!o1^.attributes.box && !!o2^.attributes.box)
    return getRebound(&*o1^.attributes.box, &*o2^.attributes.box, o1^.pos - o2^.pos);
  return null;
}

