
export import "std/expected.znn";
export import "std/vector.znn";
export import "std/hash_map.znn";
export import "color.znn";
export import "vec2.znn";
import "sdl_surface.znn";
import "sdl_window.znn";
import "std/io.znn";

embed {
//#include "SDL.h"
//#include "SDL_ttf.h"
}

extern struct FC_Font;

embed {
#include "SDL_FontCache.h"
}

export embed {
  struct FC_Font;
}

export struct sdl_font {
  sdl_window* window;
  string path;
  hash_map<int, FC_Font mutable*> fonts;
};

FC_Font mutable*!string get_font_impl(sdl_font mutable* font, int size) {
  const gen_error = [] (string s) -> expected<FC_Font mutable*, string> {
    return s;
  };
  const gen_value = [] (FC_Font mutable* f) -> expected<FC_Font mutable*, string> {
    return f;
  };
  embed_returns {
    if (!font->fonts.count(size)) {
      auto f = FC_CreateFont();
      if (!FC_LoadFont(f, font->window->renderer, font->path.data(), size, FC_MakeColor(255, 255, 255, 255),
            TTF_STYLE_NORMAL))
        return invoke(&gen_error, zenon_string::reference(TTF_GetError()));
      font->fonts[size] = f;
      return invoke(&gen_value, f);
    }
  }
  return *font->fonts.get(&size);
}

export sdl_font!string load_sdl_font(sdl_window* window, string path, int min_size, int max_size) {
  return sdl_font(window, path, hash_map<int, FC_Font mutable*>());
}

export void!string draw_text(sdl_font mutable* font, vec2 pos, int size, color color, string text) {
  const fc_font = try font->get_font_impl(size);
  embed {
    FC_DrawColor(fc_font, font->window->renderer, pos.x, pos.y,
        FC_MakeColor(color.r, color.g, color.b, 255), "%s", text.data());
  }
}

export void!string draw_rotated_text(sdl_font mutable* font, vec2 pos, int size, color color, string text,
    sdl_texture* texture, double angle) {
  const fc_font = try font->get_font_impl(size);
  const texSize = *texture->size();
  embed {
    auto renderer = font->window->renderer;
    SDL_SetRenderTarget(renderer, texture->texture);
    SDL_SetRenderDrawColor(renderer, 0, 0, 0, 0);
    SDL_RenderClear(renderer);
    int textH = FC_GetHeight(fc_font, "%s", text.data());
    FC_DrawEffect(fc_font,
        renderer,
        texSize.x / 2,
        texSize.y / 2 - textH / 2,
        FC_Effect{FC_ALIGN_CENTER, FC_Scale{1.0, 1.0}, FC_MakeColor(color.r, color.g, color.b, 255)},
        "%s",
        text.data());
    SDL_SetRenderTarget(renderer, NULL);
    SDL_Rect dest = {pos.x - texSize.x / 2, pos.y - texSize.y / 2, texSize.x, texSize.y};
    SDL_RenderCopyEx(renderer, texture->texture, NULL, &dest, angle * 180.0 / 3.14, NULL, SDL_FLIP_NONE);
  }
}

export vec2!string get_text_size(sdl_font mutable* font, string text, int size) {
  const fc_font = try font->get_font_impl(size);
  mutable ret = vec2(0, 0);
  embed {
    ret = {FC_GetWidth(fc_font, "%s", text.data()),
      FC_GetHeight(fc_font, "%s", text.data())};
  }
  return ret;
}

embed {
#include "SDL_FontCache.c"
}
