
import "vec2.znn";
export import "rectangle.znn";

export enum RectanglePlacement {
  CENTER,
  TOP_CENTER,
  BOTTOM_CENTER,
  BOTTOM_STRETCHED,
  LEFT_CENTER,
  RIGHT_CENTER,
};

export rectangle get(RectanglePlacement placement, vec2 size, rectangle* bounds) {
  switch (placement) {
    case (CENTER) { return rectangle(bounds->middle() - size / 2, bounds->middle() + size - size / 2); }
    case (TOP_CENTER) { return rectangle(
        vec2(bounds->middle().x - size.x / 2, bounds->top()),
        vec2(bounds->middle().x + size.x / 2, bounds->top() + size.y)); }
    case (BOTTOM_CENTER) { return rectangle(
        vec2(bounds->middle().x - size.x / 2, bounds->bottom() - size.y),
        vec2(bounds->middle().x + size.x / 2, bounds->bottom())); }
    case (BOTTOM_STRETCHED) { return rectangle(
        vec2(bounds->left(), bounds->bottom() - size.y), bounds->v2); }
    case (LEFT_CENTER) { return rectangle(
        vec2(bounds->left(), bounds->middle().y - size.y  / 2),
        vec2(bounds->left() + size.x, bounds->middle().y + size.y - size.y / 2));
    }
    case (RIGHT_CENTER) { return rectangle(
        vec2(bounds->right() - size.x, bounds->middle().y - size.y  / 2),
        vec2(bounds->right(), bounds->middle().y + size.y - size.y / 2));
    }
  }
}

