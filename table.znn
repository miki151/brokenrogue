
export import "std/vector.znn";
export import "vec2.znn";
export import "rectangle.znn";
export import "std/panic.znn";

export template <T>
struct table {
  vec2 sz;
  vector<T> cells;
};

export template <T> requires copy<T>
table(vec2 size, T elem) {
  return table<T>::table(size, vector(size.x * size.y, move(elem)));
}

export template <T>
T* operator [](table<T>* t, vec2 v) {
  assert(t->bounds().contains(&v), "{v} not in bounds {t->sz}");
  return &t->cells[v.x + v.y * t->sz.x];
}

export template <T>
T mutable* operator [](table<T> mutable* t, vec2 v) {
  assert(t->bounds().contains(&v), "{v} not in bounds {t->sz}");
  return &t->cells[v.x + v.y * t->sz.x];
}

export template <T>
vec2 size(table<T>* t) {
  return t->sz;
}

export template <T>
rectangle bounds(table<T>* t) {
  return rectangle(vec2(0, 0), t->sz);
}


