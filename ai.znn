
import "game.znn";
import "std/math.znn";
import "std/io.znn";
export import "std/vector.znn";
export import "std/box.znn";


bool canReachMelee(GameObject* obj, GameObject* target) {
  return (obj->pos - target->pos).length_d() - target->attributes.box->size < obj->attributes.creature->meleeAttack->reach;
}

export struct AIAvoidMelee {};

export AIAvoidMelee copy(AIAvoidMelee*) = default;

export bool makeMove(AIAvoidMelee*, Game mutable* game, GameObject mutable* object, double timeDiff) {
  const obj = game->getPlayer();
  if (canReachMelee(obj, object) && !!obj->ongoingAttack) {
    const v = object->pos - obj->pos;
    discard object->advance(game, 4 * timeDiff, atan2(v.x, v.y));
    return true;
  }
  return false;
}

export struct AIMelee {};

export AIMelee copy(AIMelee*) = default;

export bool makeMove(AIMelee*, Game mutable* game, GameObject mutable* object, double) {
  if (!object->attributes.creature->meleeAttack)
    return false;
  for (obj : game->objects)
    if (&*obj != object && canReachMelee(object, &*obj)) {
      const v = obj->pos - object->pos;
      discard object->addMeleeAttack(atan2(v.x, v.y));
      return true;
    }
  return false;
}

export struct AIPathfind {};
export AIPathfind copy(AIPathfind*) = default;

export bool makeMove(AIPathfind*, Game mutable* game, GameObject mutable* object, double timeDiff) {
  const obj = game->getPlayer();
  if (!canReachMelee(object, obj)) {
    const targetDir = obj->pos- object->pos;
    discard object->advance(game, 4 * timeDiff, atan2(targetDir.x, targetDir.y));
    return true;
  }
  return false;
}

export struct AIFirst {
  vector<AI> elems;
};
export AIFirst copy(AIFirst*) = default;

export bool makeMove(AIFirst* first, Game mutable* game, GameObject mutable* object, double timeDiff) {
  for (elem : first->elems)
    if (elem->makeMove(game, object, timeDiff))
      return true;
  return false;
}

export union AI {
  AIMelee melee;
  AIAvoidMelee avoidMelee;
  AIPathfind pathfind;
  AIFirst first;
};

export AI copy(AI*) = default;

export bool makeMove(virtual AI*, Game mutable* game, GameObject mutable* object, double timeDiff);

