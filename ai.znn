
import "game.znn";
import "std/math.znn";
export import "std/vector.znn";
export import "std/box.znn";

export struct AIMelee {};

bool canReachMelee(GameObject* obj, vec2d pos) {
  return (obj->pos - pos).length_d() < obj->attributes.creature->meleeAttack->reach;
}

export bool makeMove(AIMelee*, Game mutable* game, GameObject mutable* object, double) {
  if (!object->attributes.creature->meleeAttack)
    return false;
  for (obj : game->objects)
    if (&*obj != object && canReachMelee(object, obj->pos)) {
      const v = obj->pos - object->pos;
      discard object->addMeleeAttack(atan2(v.x, v.y));
      return true;
    }
  return false;
}

export struct AIPathfind {};

export bool makeMove(AIPathfind*, Game mutable* game, GameObject mutable* object, double timeDiff) {
  const targetPos = game->getPlayer()->pos;
  if (!canReachMelee(object, targetPos)) {
    const targetDir = targetPos - object->pos;
    discard object->advance(game, 4 * timeDiff, atan2(targetDir.x, targetDir.y));
    return true;
  }
  return false;
}

export struct AIFirst {
  vector<AI> elems;
};

export bool makeMove(AIFirst* first, Game mutable* game, GameObject mutable* object, double timeDiff) {
  for (elem : first->elems)
    if (elem->makeMove(game, object, timeDiff))
      return true;
  return false;
}

export union AI {
  AIMelee melee;
  AIPathfind pathfind;
  AIFirst first;
};

export bool makeMove(virtual AI*, Game mutable* game, GameObject mutable* object, double timeDiff);

export AI getAI() {
  return AI::first(AIFirst({AI::pathfind(AIPathfind()), AI::melee(AIMelee())}.as_vector()));
}
