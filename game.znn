
export import "std/vector.znn";
import "vec2.znn";
import "std/math.znn";

export struct tile {
  char symbol;
};

export tile copy(tile*) = default;

export struct level {
  string name;
  vector<vector<tile>> tiles;
};

export level(string name, vec2 size) {
  const tiles = vector(size.x, vector(size.y, tile('.')));
  return level::level(name, move(tiles));
}

export tile*? get_tile(level* l, vec2 pos) {
  if (pos.x >= 0 && pos.x < l->tiles.size() && pos.y >= 0 && pos.y < l->tiles[0].size())
    return &l->tiles[pos.x][pos.y];
  return null;
}

export struct creature {
  double pos_x;
  double pos_y;
  double dir;
  char symbol;
};

export void advance(creature mutable* c, double amount, double angle) {
  c->pos_x += sin(c->dir + angle) * amount;
  c->pos_y += cos(c->dir + angle) * amount;
}

export struct game {
  level level;
  creature player;
};

export game() {
  return game::game(level("Level 1", vec2(300, 300)), creature(150.0, 150.0, 0.0, '@'));
}

