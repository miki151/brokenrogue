
export import "std/vector.znn";
export import "vec2.znn";
import "std/math.znn";
export import "color.znn";
export import "creature.znn";
export import "projectile.znn";
export import "table.znn";
export import "glyph.znn";
import "std/time.znn";
export import "level_generator.znn";
import "std/hash_map.znn";
export import "level_animation.znn";
export import "game_object.znn";

export struct Tile {
  Glyph glyph;
};

export Tile copy(Tile*) = default;

export struct Level {
  string name;
  table<Tile> tiles;
};

export Level(string name, vec2 size) {
  const tiles = table(size, Tile(Glyph(".", color(80, 80, 80))));
  return Level::Level(name, move(tiles));
}

export Tile*? getTile(Level* l, vec2 pos) {
  if (pos.x >= 0 && pos.x < l->tiles.size().x && pos.y >= 0 && pos.y < l->tiles.size().y)
    return &l->tiles[pos];
  return null;
}

export int? advance(GameObject mutable* c, Game* g, double amount, double angle) {
  return c->advance(g, vec2d(sin(angle), cos(angle)) * amount);
}

export int? advance(GameObject mutable* c, Game* g, vec2d dir) {
  c->pos += dir;
  if (c->attributes.creature)
    c->animation.lastMovement = current_time_milli();
  mutable int? ret = null;
  for (it : g->objects)
    if (&*it != c)
      if (const v = getRebound(c, &*it)) {
        c->pos -= *v;
        ret = it.index;
      }
  return ret;
}

export struct Game {
  Level level;
  vector<GameObject> objects;
  vector<LevelAnimation> animations;
};

export void advance(Game mutable* g, double timeDiff) {
  mutable toRemove = vector<int>();
  mutable toAdd = vector<GameObject>();
  const curTime = current_time_milli();
  for (it : g->objects)
    if (it->attributes.projectile) {
      const prevPos = it->pos;
      if (const hitIndex = it->advance(g, it->attributes.projectile->dir * timeDiff)) {
        toRemove.push_back(it.index);
        const hitObject = &g->objects[*hitIndex];
        if (hitObject->attributes.creature) {
          g->animations.push_back(LevelAnimation(LevelAnimationType::BLOOD, hitObject->pos, curTime));
          --hitObject->attributes.creature->health;
          if (hitObject->attributes.creature->health <= 0) {
            toRemove.push_back(*hitIndex);
            for (i : range(0, 10))
            g->animations.push_back(LevelAnimation(LevelAnimationType::BLOOD, hitObject->pos, curTime + i));
          }
        } else
          g->animations.push_back(LevelAnimation(LevelAnimationType::EXPLOSION, prevPos, curTime));
      }
    }
  for (i = toRemove.size() - 1; i >= 0; --i)
    g->objects.remove(toRemove[i]);
  while (!toAdd.empty())
    g->objects.push_back(toAdd.pop_back());
}

export void spawnProjectile(Game mutable *g, GameObject* o, double dir, Glyph glyph) {
  const vdir = vec2d(sin(dir), cos(dir));
  g->objects.push_back(GameObject(
      o->pos + vdir * 1.0,
      GameObjectAnimation(),
      GameObjectAttributes(
        move(glyph),
        BoundingBox(0.4),
        null,
        Projectile(vdir * 20.0),
        false
      )
  ));
}

export GameObject* getPlayer(Game* g) {
  return &g->objects[0];
}

export GameObject mutable* getPlayer(Game mutable* g) {
  return &g->objects[0];
}

vector<GameObject> getObjects(vec2 levelSize, LevelGenerator* generator,
    hash_map<string, GameObjectAttributes>* mapping) {
  mutable ret = vector<GameObject>();
  const levelTable = *generator->generate(levelSize);
  mutable playerIndex = -1;
  for (v : levelTable.bounds())
    for (token : levelTable[*v])
      if (const attr = mapping->get_maybe(&*token)) {
        if (*token == "player") {
          assert(playerIndex == -1);
          playerIndex = ret.size();
        }
        ret.push_back(GameObject(v->as_double(), GameObjectAnimation(), (*attr)->copy()));
      }
  if (playerIndex > 0)
    swap(&ret[playerIndex], &ret[0]);
  return move(ret);
}

export Game(LevelGenerator* generator, hash_map<string, GameObjectAttributes>* mapping) {
  const size = vec2(30, 30);
  return Game::Game(Level("Level 1", size), getObjects(size, generator, mapping), vector<LevelAnimation>());
}

