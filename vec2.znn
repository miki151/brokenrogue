
export import "direction.znn";
import "std/io.znn";
import "std/enum.znn";
import "std/math.znn";

export struct vec2 {
  int x;
  int y;
};

export vec2 operator + (vec2* a, vec2* b) {
  return vec2(a->x + b->x, a->y + b->y);
}

export vec2 operator / (vec2* a, int* b) {
  return vec2(a->x / *b, a->y / *b);
}

export vec2 operator * (vec2* a, int* b) {
  return vec2(a->x * *b, a->y * *b);
}

export vec2 operator - (vec2* a, vec2* b) {
  return vec2(a->x - b->x, a->y - b->y);
}

export bool operator == (vec2* a, vec2* b) {
  return a->x == b->x && a->y == b->y;
}

export vec2 implicit_copy(vec2*) = default;

export string to_string(vec2* v) {
  return "(" + to_string(&v->x) + ", " + to_string(&v->y) + ")";
}

export double length_d(vec2* v) {
  return sqrt(v->x * v->x + v->y * v->y);
}
