
import "sdl.znn";
import "sdl_surface.znn";
import "sdl_canvas.znn";
import "ui.znn";
import "std/io.znn";
import "ui_reader.znn";
import "sdl_ttf.znn";
import "ui_data.znn";
import "game.znn";
import "std/enum_set.znn";
import "std/enum.znn";
import "std/time.znn";
import "std/flags.znn";
import "fps_meter.znn";
import "game_level_ui.znn";
import "level_generator_reader.znn";
import "std/random.znn";
import "std/panic.znn";

struct Y {
  int u;
};

struct X {
  int a;
  bool b;
  Y y;
};

hash_map<string, sdl_texture> loadTextures(sdl_window* window) {
  mutable ret = hash_map<string, sdl_texture>();
//  ret.insert("tex1", *sdl_load_bmp("texture1.bmp")->to_texture(window));
  return move(ret);
}

box<UIElement> readUIFrom(string path) {
  return *read_ui(*open_file_r(path)->read_content());
}

struct Flags {
  string? font;
};

int main(string[] args) {
  const panic_handler = [](string s) { printf("{s}\n"); exit(0); };
  set_panic_handler(&panic_handler);
  const flags = *read_flags<Flags>(args);
  *sdl_init();
  init_random();
  mutable ui = readUIFrom("ui.txt");
  const window = *sdl_create_window(vec2(1280, 720), "Infinihack");
  *sdl_set_relative_mouse_mode(true);
  mutable font = *window.load_sdl_font(flags.font ?? "font.ttf", 10, 100);
  const canvas = SDLCanvas(&window, &font, loadTextures(&window));
  const ui_rectangle = rectangle(vec2(0, 0), window.size());
  const levelGen = *readLevelGenerator(*open_file_r("levelgen.txt")->read_content());
  const levelMapping = *readLevelMapping(*open_file_r("levelmapping.txt")->read_content());
  mutable game = Game(levelGen.get(), &levelMapping);
  mutable uiData = UIRecord(hash_map<string, box<any>>());
  mutable exit = false;
  mutable timeDiff = 0.0;
  mutable last_update = current_time_milli();
  mutable realTimeEnd = last_update;
  const timeSpentCallback = [&] (int time) { realTimeEnd = max(realTimeEnd, last_update + time); };
  const game_data = GameLevelUIData(
      &game,
      &timeSpentCallback
  );
  uiData.data.insert("game_level", box_as<any>(move(game_data)));
  mutable events_state = sdl_events_state();
  mutable uiState = UIState();
  uiData.data.insert("exit_callback", [&exit] { exit = true; }.box_as<UICallback>().box_as<any>());
  uiData.data.insert("reload_ui", [&ui] { ui = readUIFrom("ui.txt"); }.box_as<UICallback>().box_as<any>());
  mutable fps = fps_meter();
  while (!exit) {
    fps.add_tick();
    uiData.data.insert("fps", "{fps.get_fps()}".box_as<any>());
    const cur_time = current_time_milli();
    timeDiff = 0.001 * (cur_time - last_update);
    if (cur_time <= realTimeEnd)
      game.advance(timeDiff);
    last_update = cur_time;
    const context = UIContext(&canvas, &uiData, &uiState, timeDiff);
    for (event : events_state.get_events()) {
      if (exit)
        break;
      switch (*event) {
        case (quit) { return 0; }
        case (key) {
          discard ui->onKeyEvent(context, &ui_rectangle, &key);
        }
        case (mouse) {
          discard ui->onMouseEvent(context, &ui_rectangle, &mouse);
        }
        default {}
      }
    }
    ui->render(context, &ui_rectangle);
    window.update();
  }
  return 0;
}
