
export import "vec2.znn";
import "std/range.znn";

export struct rectangle {
  vec2 v1;
  vec2 v2;
};

export rectangle centered_rect(vec2 pos, int radius) {
  return rectangle(pos - vec2(radius, radius), pos + vec2(radius + 1, radius + 1));
}

export bool contains(rectangle* r, vec2* pos) {
  return pos->x >= r->v1.x && pos->y >= r->v1.y && pos->y < r->v2.y && pos->x < r->v2.x;
}

export vec2 size(rectangle* r) {
  return r->v2 - r->v1;
}

export vec2 middle(rectangle* r) {
  return (r->v2 + r->v1) / 2;
}

export int top(rectangle* r) {
  return r->v1.y;
}

export int bottom(rectangle* r) {
  return r->v2.y;
}

export int left(rectangle* r) {
  return r->v1.x;
}

export int right(rectangle* r) {
  return r->v2.x;
}

export rectangle plus_margin(rectangle* r, int width) {
  return rectangle(r->v1 - vec2(width, width), r->v2 + vec2(width, width));
}

export bool overlaps(rectangle* r1, rectangle* r2) {
  const x1 = r1->x_range();
  const x2 = r2->x_range();
  const y1 = r1->y_range();
  const y2 = r2->y_range();
  return x1.overlaps(&x2) && y1.overlaps(&y2);
}

export range x_range(rectangle* r) {
  return range(r->v1.x, r->v2.x);
}

export range y_range(rectangle* r) {
  return range(r->v1.y, r->v2.y);
}

export rectangle copy(rectangle*) = default;

export struct rectangle_iterator {
  rectangle r;
  vec2 pos;
};

export rectangle_iterator begin(rectangle* r) {
  return rectangle_iterator(r->copy(), r->v1.copy());
}

export rectangle_iterator end(rectangle* r) {
  return rectangle_iterator(r->copy(), vec2(r->v1.x, r->v2.y));
}

export vec2 operator * (rectangle_iterator* it) {
  return it->pos.copy();
}

export void operator ++ (rectangle_iterator mutable* it) {
  ++it->pos.x;
  if (it->pos.x == it->r.v2.x) {
    it->pos.x = it->r.v1.x;
    ++it->pos.y;
  }
}

export bool operator == (rectangle_iterator* it1, rectangle_iterator* it2) {
  return it1->pos == it2->pos;
}

export string to_string(rectangle* r) {
  return "(" + to_string(&r->v1) + ", " + to_string(&r->v2) + ")";
}
