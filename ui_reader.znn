
export import "ui.znn";
import "game_level_ui.znn";
import "pretty_input.znn";
import "std/io.znn";

template <T> requires (T == margins || T == fill || T == label || T == texture || T == position || T == button
    || T == frame || T == game_level_ui || T == key_handler || T == text_ui)
bool round_brackets(pretty_dummy_struct<T>) {
  return true;
}

box<ui_element>!string read_data(input_stream mutable* stream, pretty_dummy_struct<box<ui_element>>) {
  const last_index = stream->index;
  const s = stream->read_string();
  if (s == "margins")
    return (try stream->read_data<margins>()).box_as<ui_element>();
  if (s == "fill")
    return (try stream->read_data<fill>()).box_as<ui_element>();
  if (s == "label")
    return (try stream->read_data<label>()).box_as<ui_element>();
  if (s == "text")
    return (try stream->read_data<text_ui>()).box_as<ui_element>();
  if (s == "texture")
    return (try stream->read_data<texture>()).box_as<ui_element>();
  if (s == "position")
    return (try stream->read_data<position>()).box_as<ui_element>();
  if (s == "list_ui")
    return (try stream->read_data<list_ui>()).box_as<ui_element>();
  if (s == "button")
    return (try stream->read_data<button>()).box_as<ui_element>();
  if (s == "key_handler")
    return (try stream->read_data<key_handler>()).box_as<ui_element>();
  if (s == "frame")
    return (try stream->read_data<frame>()).box_as<ui_element>();
  if (s == "using")
    return (try stream->read_data<using_ui>()).box_as<ui_element>();
  if (s == "width")
    return (try stream->read_data<width_ui>()).box_as<ui_element>();
  if (s == "height")
    return (try stream->read_data<height_ui>()).box_as<ui_element>();
  if (s == "game_level")
    return (try stream->read_data<game_level_ui>()).box_as<ui_element>();
  if (s == "\{") {
    stream->index = last_index;
    return (try stream->read_data<chain>()).box_as<ui_element>();
  }
  stream->index = last_index;
  return stream->get_error("Not an UI type: \"{s}\"");
}

export box<ui_element>!string read_ui(string content) {
  mutable stream = try create_input_stream(content);
  return stream.read_data<box<ui_element>>();
}
